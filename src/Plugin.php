<?php declare(strict_types = 1);

namespace PHPStan\ExtensionInstaller;

use Composer\Composer;
use Composer\EventDispatcher\EventSubscriberInterface;
use Composer\Installer\PackageEvent;
use Composer\Installer\PackageEvents;
use Composer\IO\IOInterface;
use Composer\Plugin\PluginInterface;

final class Plugin implements PluginInterface, EventSubscriberInterface
{

	/** @var string */
	private static $generatedFileTemplate = <<<'PHP'
<?php declare(strict_types = 1);

namespace PHPStan\ExtensionInstaller;

/**
 * This class is generated by phpstan/extension-installer.
 */
final class Extensions
{

	public const CONFIG = %s;

	private function __construct()
	{
	}

}

PHP;

	public function activate(Composer $composer, IOInterface $io)
	{
		// noop
	}

	public static function getSubscribedEvents(): array
	{
		return [
			PackageEvents::POST_PACKAGE_INSTALL => 'process',
			PackageEvents::POST_PACKAGE_UPDATE => 'process',
			PackageEvents::POST_PACKAGE_UNINSTALL => 'process',
		];
	}

	public function process(PackageEvent $event): void
	{
		$io = $event->getIO();
		$composer = $event->getComposer();

		$data = [];
		foreach ($composer->getRepositoryManager()->getLocalRepository()->getPackages() as $package) {
			if ($package->getType() !== 'phpstan-extension') {
				continue;
			}
			$data[$package->getName()] = $package->getExtra()['phpstan'] ?? null;
		}

		$io->write('<info>phpstan/extension-installer:</info> Generating extension class...');
		file_put_contents(__DIR__ . '/Extensions.php', sprintf(self::$generatedFileTemplate, var_export($data, true)));
		$io->write('<info>phpstan/extension-installer:</info> ...done generating extension class');
	}

}
